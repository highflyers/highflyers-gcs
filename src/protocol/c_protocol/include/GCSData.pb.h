/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.3 at Thu Nov  7 17:41:49 2013. */

#ifndef _PB_GCSDATA_PB_H_
#define _PB_GCSDATA_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Control_t_Direction {
    Control_t_Direction_D_LEFT = 1,
    Control_t_Direction_D_RIGHT = 2,
    Control_t_Direction_D_FRONT = 3,
    Control_t_Direction_D_BACK = 4
} Control_t_Direction;

typedef enum _Control_t_Rotation {
    Control_t_Rotation_R_LEFT = 1,
    Control_t_Rotation_R_RIGHT = 2
} Control_t_Rotation;

/* Struct definitions */
typedef struct _Axes_t {
    bool has_x;
    double x;
    bool has_y;
    double y;
    bool has_z;
    double z;
} Axes_t;

typedef struct _Control_t {
    bool has_go_direction;
    Control_t_Direction go_direction;
    bool has_rotate;
    Control_t_Rotation rotate;
    bool has_start;
    bool start;
    bool has_land;
    bool land;
} Control_t;

typedef struct _EulerAngles_t {
    bool has_roll;
    double roll;
    bool has_pitch;
    double pitch;
    bool has_yaw;
    double yaw;
} EulerAngles_t;

typedef struct _GPS_t {
    bool has_localization;
    int32_t localization;
    bool has_direction;
    int32_t direction;
    bool has_speed;
    int32_t speed;
    bool has_height;
    int32_t height;
} GPS_t;

typedef struct _PID_t {
    bool has_P;
    double P;
    bool has_I;
    double I;
    bool has_D;
    double D;
} PID_t;

typedef struct _GCSData {
    bool has_EulerAngles;
    EulerAngles_t EulerAngles;
    bool has_Axes;
    Axes_t Axes;
    bool has_GPS;
    GPS_t GPS;
    bool has_Control;
    Control_t Control;
    bool has_PID;
    PID_t PID;
    pb_callback_t waypoint;
    bool has_battery;
    int32_t battery;
} GCSData;

/* Default values for struct fields */

/* Field tags (for use in manual encoding/decoding) */
#define Axes_t_x_tag                             4
#define Axes_t_y_tag                             5
#define Axes_t_z_tag                             6
#define Control_t_go_direction_tag               12
#define Control_t_rotate_tag                     13
#define Control_t_start_tag                      14
#define Control_t_land_tag                       15
#define EulerAngles_t_roll_tag                   1
#define EulerAngles_t_pitch_tag                  2
#define EulerAngles_t_yaw_tag                    3
#define GPS_t_localization_tag                   8
#define GPS_t_direction_tag                      9
#define GPS_t_speed_tag                          10
#define GPS_t_height_tag                         11
#define PID_t_P_tag                              16
#define PID_t_I_tag                              17
#define PID_t_D_tag                              18
#define GCSData_EulerAngles_tag                  19
#define GCSData_Axes_tag                         20
#define GCSData_GPS_tag                          21
#define GCSData_Control_tag                      22
#define GCSData_PID_tag                          23
#define GCSData_waypoint_tag                     24
#define GCSData_battery_tag                      25

/* Struct field encoding specification for nanopb */
extern const pb_field_t EulerAngles_t_fields[4];
extern const pb_field_t Axes_t_fields[4];
extern const pb_field_t GPS_t_fields[5];
extern const pb_field_t Control_t_fields[5];
extern const pb_field_t PID_t_fields[4];
extern const pb_field_t GCSData_fields[8];

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
